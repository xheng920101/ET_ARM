<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\STM_DEMO.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\STM_DEMO.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Wed Jan 23 15:42:21 2019
<BR><P>
<H3>Maximum Stack Usage =       2552 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; USART_EventProcess &rArr; OTP &rArr; SD_Write_OTPInfo &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[12e]">kf_work</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12e]">kf_work</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[59]">CRYP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5a]">HASH_RNG_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5c]">SystemInit</a> from system_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f2xx_it.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f2xx.o(.text) referenced from startup_stm32f2xx.o(RESET)
 <LI><a href="#[5d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f2xx.o(.text)
 <LI><a href="#[5f]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[5e]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[62]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[61]">fputc</a> from usart.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[60]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[5b]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(.text)
</UL>
<P><STRONG><a name="[260]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[63]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[243]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[261]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[262]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[263]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[264]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[265]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f2xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIO_DeInit</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32f2xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[c5]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Check_Config
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DeInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SDIO_Configuration
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Config_CTP
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Rx
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Check_Ack
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Config_OFF
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Config_ON
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD2828_SPI_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2C_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EN_Config
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RST_Config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI_Config
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_FSMC_Config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_Config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSENSOR_I2C_Config
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_Config
</UL>

<P><STRONG><a name="[266]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GetState
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_GetState
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OTP
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PWM_Detect
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Read
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3Read
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Rx
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Check_Ack
</UL>

<P><STRONG><a name="[268]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTPProc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OFF
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Write
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Start
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OTP
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Reset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Read
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3Write
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3Read
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_Write
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_VSP_Set
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_VSN_Set
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_VCI_Set
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_ON1
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Rx
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Tx
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Check_Ack
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Uak
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PWM_Control
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDATA2SSD
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCMD2SSD
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_Reset
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_OFF
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SLEEPIN
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverIC_Reset
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Config_ON
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD2828_SPI_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2C_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EN_Config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI_Config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_Config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSENSOR_I2C_Config
</UL>

<P><STRONG><a name="[ee]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTPProc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Write
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Start
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OTP
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_ON
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Reset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Read
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3Write
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3Read
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_Write
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_IOVCC_Reset
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_OFF1
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Rx
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Tx
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Check_Ack
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Uak
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PWM_Control
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDATA2SSD
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCMD2SSD
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_Reset
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SLEEPIN
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverIC_Reset
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Config_ON
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD2828_SPI_Config
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RST_Config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI_Config
</UL>

<P><STRONG><a name="[26b]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Toggle
</UL>

<P><STRONG><a name="[c4]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f2xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DeInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SDIO_Configuration
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_FSMC_Config
</UL>

<P><STRONG><a name="[26d]"></a>RCC_DeInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>RCC_HSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[67]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[26f]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>RCC_MCO1Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>RCC_MCO2Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>RCC_HCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>RCC_PCLK1Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>RCC_PCLK2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[27f]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SDIO_Configuration
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_Config
</UL>

<P><STRONG><a name="[283]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_FSMC_Config
</UL>

<P><STRONG><a name="[c9]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Config
</UL>

<P><STRONG><a name="[c3]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DeInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SDIO_Configuration
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_Config
</UL>

<P><STRONG><a name="[66]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[284]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[6a]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[286]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>RCC_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>RCC_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>USART_DeInit</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, stm32f2xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[6c]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
</UL>

<P><STRONG><a name="[28f]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
</UL>

<P><STRONG><a name="[292]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[cd]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSE_Data_Reciever
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_Data_Reciever
</UL>

<P><STRONG><a name="[295]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
</UL>

<P><STRONG><a name="[cb]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSE_Data_Reciever
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_Data_Reciever
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[2a2]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>USART_GetITStatus</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f2xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f2xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSE_Data_Reciever
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_Data_Reciever
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
</UL>

<P><STRONG><a name="[135]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_Config
</UL>

<P><STRONG><a name="[136]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_Config
</UL>

<P><STRONG><a name="[2a4]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_Config
</UL>

<P><STRONG><a name="[2a5]"></a>DMA_PeriphIncOffsetSizeConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxConfig
</UL>

<P><STRONG><a name="[2a6]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[2ac]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[2ad]"></a>DMA_GetFIFOStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAEndOfTransferStatus
</UL>

<P><STRONG><a name="[190]"></a>DMA_ClearFlag</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ProcessIRQSrc
</UL>

<P><STRONG><a name="[2ae]"></a>DMA_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>DMA_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[2b0]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f2xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>ADC_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[134]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_Config
</UL>

<P><STRONG><a name="[2b1]"></a>ADC_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>ADC_CommonInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_Config
</UL>

<P><STRONG><a name="[2b2]"></a>ADC_CommonStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_Config
</UL>

<P><STRONG><a name="[2b3]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2b7]"></a>ADC_VBATCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_Config
</UL>

<P><STRONG><a name="[13c]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_Config
</UL>

<P><STRONG><a name="[2b8]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2b9]"></a>ADC_EOCOnEachRegularChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>ADC_ContinuousModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>ADC_GetMultiModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_Config
</UL>

<P><STRONG><a name="[137]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_Config
</UL>

<P><STRONG><a name="[2bf]"></a>ADC_MultiModeDMARequestAfterLastTransferCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2c1]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>ADC_ExternalTrigInjectedConvEdgeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>ADC_SoftwareStartInjectedConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>ADC_ITConfig</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2cb]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>ADC_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDDMA_VIC_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
</UL>

<P><STRONG><a name="[ad]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDDMA_VIC_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
</UL>

<P><STRONG><a name="[2cf]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>FSMC_NORSRAMDeInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_FSMC_Config
</UL>

<P><STRONG><a name="[2d3]"></a>FSMC_NORSRAMStructInit</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_FSMC_Config
</UL>

<P><STRONG><a name="[2d4]"></a>FSMC_NANDDeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>FSMC_NANDInit</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>FSMC_NANDStructInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>FSMC_NANDCmd</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>FSMC_NANDECCCmd</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>FSMC_GetECC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>FSMC_PCCARDDeInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>FSMC_PCCARDInit</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>FSMC_PCCARDStructInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>FSMC_PCCARDCmd</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>FSMC_ITConfig</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>FSMC_GetFlagStatus</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>FSMC_ClearFlag</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>FSMC_GetITStatus</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>FSMC_ClearITPendingBit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32f2xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>SDIO_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f2xx_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DeInit
</UL>

<P><STRONG><a name="[19d]"></a>SDIO_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[2e3]"></a>SDIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DeInit
</UL>

<P><STRONG><a name="[18c]"></a>SDIO_SetPowerState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerOFF
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DeInit
</UL>

<P><STRONG><a name="[1a4]"></a>SDIO_GetPowerState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[197]"></a>SDIO_SendCommand</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[2e4]"></a>SDIO_CmdStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
</UL>

<P><STRONG><a name="[1a2]"></a>SDIO_GetResponse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f2xx_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
</UL>

<P><STRONG><a name="[198]"></a>SDIO_DataConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[2e5]"></a>SDIO_DataStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>SDIO_GetDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>SDIO_ReadData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[2e7]"></a>SDIO_WriteData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>SDIO_GetFIFOCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>SDIO_StartSDIOReadWait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>SDIO_StopSDIOReadWait</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>SDIO_SetSDIOReadWaitMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>SDIO_SetSDIOOperation</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>SDIO_SendSDIOSuspendCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>SDIO_CommandCompletionCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>SDIO_CEATAITCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>SDIO_SendCEATACmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>SDIO_DMACmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[1b2]"></a>SDIO_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[199]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[195]"></a>SDIO_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[2f1]"></a>SDIO_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[70]"></a>TIM_DeInit</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Config
</UL>

<P><STRONG><a name="[ff]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Config
</UL>

<P><STRONG><a name="[2f2]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Config
</UL>

<P><STRONG><a name="[2fe]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>TIM_OC3Init</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>TIM_OC4Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>TIM_SelectOCxM</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[77]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[75]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[73]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[71]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[321]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[322]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Config
</UL>

<P><STRONG><a name="[32b]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_EventProcess
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_EventProcess
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_EventProcess
</UL>

<P><STRONG><a name="[100]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Config
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_EventProcess
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_EventProcess
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_EventProcess
</UL>

<P><STRONG><a name="[32c]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[32d]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[7b]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[7d]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[7f]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[7e]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[80]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[332]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[335]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[336]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(.text)
</UL>
<P><STRONG><a name="[338]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, system_stm32f2xx.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>main</STRONG> (Thumb, 400 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2552<LI>Call Chain = main &rArr; USART_EventProcess &rArr; OTP &rArr; SD_Write_OTPInfo &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_list
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Switch
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_MODE_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP_DPT
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Load_bmp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OFF
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Initial
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Differ2_Detect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_Check
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Start
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[9a]"></a>task_list</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, taskpolling.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = task_list &rArr; KeyProc &rArr; LCM_Reset &rArr; IC_Init &rArr; LCD_PWM &rArr; MIPI_DCS_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GetState
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_GetState
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTPProc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSwitchPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; USART1_RXD &rArr; MSE_Data_Reciever &rArr; USART_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RXD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART4_IRQHandler &rArr; UART4_RXD &rArr; MSE_Data_Reciever &rArr; USART_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RXD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_IRQHandler &rArr; TIM2_EventProcess &rArr; ARM_PWM_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_EventProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler &rArr; TIM3_EventProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_EventProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM4_IRQHandler &rArr; TIM4_EventProcess &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_EventProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; DMA_ProcessIRQSrc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f2xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>SysTick_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[a9]"></a>Delay_us</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3Write
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResValue
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC3_Voltage
</UL>

<P><STRONG><a name="[84]"></a>Delay_ms</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay_ms &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTPProc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Start
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OTP
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OQC1
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET3
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET2
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET1
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON3sec_OFF3sec
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Current_Sleep
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_Check
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_ON
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOff
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Reset
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_Write
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSENSOR_Test
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_OFF1
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_ON1
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2C_SETTING
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yuv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_XYZ
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_CCT_MSE
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_JEITA
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Flicker
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDriverReg
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPSequence
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yxy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Current_Normal
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_Reset
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_OFF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepOut
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepIn
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PWM
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverIC_Reset
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoVcom
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Gamma_Code
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Admesy_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_sec
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SoftReset
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pattern
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_Check
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chroma_Check
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check1
</UL>

<P><STRONG><a name="[aa]"></a>Delay_sec</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Delay_sec &rArr; Delay_ms &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OTP
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SLEEPIN
</UL>

<P><STRONG><a name="[a0]"></a>Timer_Decrement</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ab]"></a>NVIC_Config</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, board_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_Config &rArr; SDDMA_VIC_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDDMA_VIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[82]"></a>Board_Init</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, board_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Board_Init &rArr; ADC3_Config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OFF
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Config
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Config
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Config_ON
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD2828_SPI_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2C_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EN_Config
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Config
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RST_Config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI_Config
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_FSMC_Config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_Config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSENSOR_I2C_Config
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Admesy_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_Config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>USART1_Config</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART1_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[b1]"></a>UART4_Config</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART4_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[61]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[cc]"></a>PC_Data_Reciever</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PC_Data_Reciever &rArr; LED_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RXD
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RXD
</UL>

<P><STRONG><a name="[ce]"></a>MSE_Data_Reciever</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MSE_Data_Reciever &rArr; USART_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RXD
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RXD
</UL>

<P><STRONG><a name="[a1]"></a>USART1_RXD</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_RXD &rArr; MSE_Data_Reciever &rArr; USART_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSE_Data_Reciever
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_Data_Reciever
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>UART4_RXD</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART4_RXD &rArr; MSE_Data_Reciever &rArr; USART_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSE_Data_Reciever
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_Data_Reciever
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>Print_Gamma_Code</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Print_Gamma_Code &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
</UL>

<P><STRONG><a name="[99]"></a>USART_EventProcess</STRONG> (Thumb, 6616 bytes, Stack size 112 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2552<LI>Call Chain = USART_EventProcess &rArr; OTP &rArr; SD_Write_OTPInfo &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OFF
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDATA2SSD
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCMD2SSD
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_Set
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Config_OFF
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanForward
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBackward
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSDReg
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDriverReg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Project_Info_Upload
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreGamma_Set
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPTimes_Read
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPSequence
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yxy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Current_Normal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_SleepMode_ON
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_Reset
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDA_DIM
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_OFF
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_OFF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepOut
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepIn
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PWM
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LitSquence
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LPMode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SLEEPIN
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Porch_Set
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_INIT_END_INFO
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPicture
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverIC_Reset
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Upload
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoVcom
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AOI_Current_Check_Sleep
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AOI_Current_Check_Normal
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AOI_Current_Check
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Gamma_Code
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Config_ON
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>USART_printf</STRONG> (Thumb, 946 bytes, Stack size 56 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_printf &rArr; itoa
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Current_Sleep
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yuv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_XYZ
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_CCT_MSE
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_JEITA
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Flicker
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yxy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Current_Normal
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Admesy_Init
</UL>

<P><STRONG><a name="[b3]"></a>TIM2_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_Config &rArr; TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[b2]"></a>TIM3_Config</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM3_Config &rArr; TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[103]"></a>TIM4_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>

<P><STRONG><a name="[a3]"></a>TIM2_EventProcess</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_EventProcess &rArr; ARM_PWM_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_PWM_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>TIM3_EventProcess</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_EventProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>TIM4_EventProcess</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM4_EventProcess &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>Admesy_Init</STRONG> (Thumb, 586 bytes, Stack size 16 bytes, admesy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Admesy_Init &rArr; USART_printf &rArr; itoa
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[106]"></a>Meas_Flicker</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, admesy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Meas_Flicker &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoVcom
</UL>

<P><STRONG><a name="[108]"></a>Meas_JEITA</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, admesy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Meas_JEITA &rArr; calc_JEITA_flicker &rArr; fft &rArr; kiss_fft_alloc &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_JEITA_flicker
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoVcom
</UL>

<P><STRONG><a name="[10d]"></a>Meas_CCT_MSE</STRONG> (Thumb, 432 bytes, Stack size 16 bytes, admesy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[10f]"></a>Meas_XYZ</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, admesy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[f9]"></a>Meas_Yxy</STRONG> (Thumb, 258 bytes, Stack size 64 bytes, admesy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Meas_Yxy &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_CCT
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_Check
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chroma_Check
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check1
</UL>

<P><STRONG><a name="[110]"></a>Meas_CCT</STRONG> (Thumb, 238 bytes, Stack size 80 bytes, admesy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yxy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[116]"></a>Meas_Yuv</STRONG> (Thumb, 654 bytes, Stack size 64 bytes, admesy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Meas_Yuv &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chroma_Check
</UL>

<P><STRONG><a name="[117]"></a>fft</STRONG> (Thumb, 516 bytes, Stack size 120 bytes, admesy_flicker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = fft &rArr; kiss_fft_alloc &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kiss_fft_alloc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kiss_fft
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_VESA_flicker
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_JEITA_flicker
</UL>

<P><STRONG><a name="[11e]"></a>fftold</STRONG> (Thumb, 636 bytes, Stack size 112 bytes, admesy_flicker.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[122]"></a>JEITA_weighing</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, admesy_flicker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = JEITA_weighing &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_VESA_flicker
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_JEITA_flicker
</UL>

<P><STRONG><a name="[10b]"></a>calc_JEITA_flicker</STRONG> (Thumb, 302 bytes, Stack size 88 bytes, admesy_flicker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = calc_JEITA_flicker &rArr; fft &rArr; kiss_fft_alloc &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JEITA_weighing
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_JEITA
</UL>

<P><STRONG><a name="[124]"></a>calc_VESA_flicker</STRONG> (Thumb, 320 bytes, Stack size 96 bytes, admesy_flicker.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JEITA_weighing
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[125]"></a>calc_flicker_mm</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, admesy_flicker.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[126]"></a>calc_flicker_rms</STRONG> (Thumb, 262 bytes, Stack size 80 bytes, admesy_flicker.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[127]"></a>dft</STRONG> (Thumb, 320 bytes, Stack size 112 bytes, admesy_flicker.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[128]"></a>idft</STRONG> (Thumb, 372 bytes, Stack size 112 bytes, admesy_flicker.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[119]"></a>kiss_fft_alloc</STRONG> (Thumb, 218 bytes, Stack size 80 bytes, kiss_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = kiss_fft_alloc &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_factor
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
</UL>

<P><STRONG><a name="[131]"></a>kiss_fft_stride</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, kiss_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = kiss_fft_stride &rArr; kf_work &rArr;  kf_work (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_work
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kiss_fft
</UL>

<P><STRONG><a name="[11a]"></a>kiss_fft</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, kiss_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = kiss_fft &rArr; kiss_fft_stride &rArr; kf_work &rArr;  kf_work (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kiss_fft_stride
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
</UL>

<P><STRONG><a name="[339]"></a>kiss_fft_cleanup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kiss_fft.o(.text), UNUSED)

<P><STRONG><a name="[33a]"></a>kiss_fft_next_fast_size</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, kiss_fft.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>ADC3_Config</STRONG> (Thumb, 250 bytes, Stack size 112 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ADC3_Config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[33b]"></a>BubbleSort</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>Get_ADC3_Voltage</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>

<P><STRONG><a name="[13e]"></a>GetResValue</STRONG> (Thumb, 288 bytes, Stack size 80 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_Check
</UL>

<P><STRONG><a name="[141]"></a>I2C_Start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Start &rArr; I2C_Delay &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Check_Addr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Read16
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Read
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Write16
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Write
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte16
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Byte16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Byte
</UL>

<P><STRONG><a name="[143]"></a>I2C_Stop</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Stop &rArr; I2C_Delay &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Check_Addr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Read16
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Read
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Write16
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Write
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte16
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Byte16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Byte
</UL>

<P><STRONG><a name="[144]"></a>I2C_Ack</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Ack &rArr; I2C_Delay &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Ack
</UL>

<P><STRONG><a name="[145]"></a>I2C_Uak</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Uak &rArr; I2C_Delay &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Uak
</UL>

<P><STRONG><a name="[146]"></a>I2C_Check_Ack</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_Check_Ack &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
</UL>

<P><STRONG><a name="[147]"></a>I2C_Tx</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Tx &rArr; I2C_Delay &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
</UL>

<P><STRONG><a name="[148]"></a>I2C_Rx</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_Rx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Uak
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Ack
</UL>

<P><STRONG><a name="[149]"></a>I2C_Write</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C_Write &rArr; I2C_Check_Ack &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Tx
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Check_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Check_Addr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Read16
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Read
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Write16
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Write
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte16
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Byte16
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Byte
</UL>

<P><STRONG><a name="[14a]"></a>I2C_Read_Ack</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C_Read_Ack &rArr; I2C_Rx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Rx
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Read16
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Read
</UL>

<P><STRONG><a name="[14b]"></a>I2C_Read_Uak</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2C_Read_Uak &rArr; I2C_Rx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Rx
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Uak
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Read16
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Read
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte16
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
</UL>

<P><STRONG><a name="[14c]"></a>I2C_Write_Byte</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C_Write_Byte &rArr; I2C_Write &rArr; I2C_Check_Ack &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2C_SETTING
</UL>

<P><STRONG><a name="[14d]"></a>I2C_Write_Byte16</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[14e]"></a>I2C_Read_Byte</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Uak
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[14f]"></a>I2C_Read_Byte16</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Uak
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[150]"></a>I2C_Sequential_Write</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = I2C_Sequential_Write &rArr; I2C_Write &rArr; I2C_Check_Ack &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2C_SETTING
</UL>

<P><STRONG><a name="[151]"></a>I2C_Sequential_Write16</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_Write
</UL>

<P><STRONG><a name="[152]"></a>I2C_Sequential_Read</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C_Sequential_Read &rArr; I2C_Read_Uak &rArr; I2C_Rx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Uak
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Ack
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadSensor
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2C_SETTING
</UL>

<P><STRONG><a name="[153]"></a>I2C_Sequential_Read16</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Uak
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Ack
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_Read
</UL>

<P><STRONG><a name="[154]"></a>I2C_Check_Addr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_Check_Addr &rArr; I2C_Write &rArr; I2C_Check_Ack &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_ADCADDR
</UL>

<P><STRONG><a name="[b9]"></a>POWER_EN_Config</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = POWER_EN_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[bb]"></a>POWER_I2C_Config</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = POWER_I2C_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2C_SETTING
</UL>

<P><STRONG><a name="[155]"></a>POWER_I2C_SETTING</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = POWER_I2C_SETTING &rArr; I2C_Sequential_Write &rArr; I2C_Write &rArr; I2C_Check_Ack &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Read
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Write
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write_Byte
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2C_Config
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
</UL>

<P><STRONG><a name="[ba]"></a>LCMPower_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, power.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCMPower_Init &rArr; LCD_PWM &rArr; MIPI_DCS_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_VSP_Set
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_VSN_Set
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_VCI_Set
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_IOVCC_Reset
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PWM
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[15b]"></a>LCMPower_ON1</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, power.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_VSP_Set
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_VSN_Set
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_VCI_Set
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[15c]"></a>LCMPower_OFF1</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, power.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_IOVCC_Reset
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PWM
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[15d]"></a>Check_ADCADDR</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, digital_sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Check_ADCADDR &rArr; I2C_Check_Addr &rArr; I2C_Write &rArr; I2C_Check_Ack &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Check_Addr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSENSOR_I2C_Config
</UL>

<P><STRONG><a name="[bd]"></a>DSENSOR_I2C_Config</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, digital_sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = DSENSOR_I2C_Config &rArr; Check_ADCADDR &rArr; I2C_Check_Addr &rArr; I2C_Write &rArr; I2C_Check_Ack &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_ADCADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[15e]"></a>I2C_ReadSensor</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, digital_sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = I2C_ReadSensor &rArr; I2C_Sequential_Read &rArr; I2C_Read_Uak &rArr; I2C_Rx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Read
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSENSOR_Test
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSENSOR_I2C_GetFlicker
</UL>

<P><STRONG><a name="[15f]"></a>DSENSOR_I2C_GetFlicker</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, digital_sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = DSENSOR_I2C_GetFlicker &rArr; I2C_ReadSensor &rArr; I2C_Sequential_Read &rArr; I2C_Read_Uak &rArr; I2C_Rx &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadSensor
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoVcom
</UL>

<P><STRONG><a name="[160]"></a>DSENSOR_Test</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, digital_sensor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadSensor
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[bc]"></a>EEPROM_I2C_Config</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EEPROM_I2C_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[161]"></a>EEPROM_I2C_Write</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Write16
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Test_Mode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WR_Verify
</UL>

<P><STRONG><a name="[162]"></a>EEPROM_I2C_Read</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Sequential_Read16
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Test_Mode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WR_Verify
</UL>

<P><STRONG><a name="[163]"></a>EEPROM_WR_Verify</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_Read
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_Write
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[164]"></a>Get_Test_Mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_Read
</UL>

<P><STRONG><a name="[165]"></a>Set_Test_Mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_Write
</UL>

<P><STRONG><a name="[166]"></a>Disp_Test_Mode</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[b7]"></a>LED_Config</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LED_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[85]"></a>LED_ON</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OTP
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_Check
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_Data_Reciever
</UL>

<P><STRONG><a name="[92]"></a>LED_OFF</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OTP
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_Check
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_Init
</UL>

<P><STRONG><a name="[167]"></a>LED_Toggle</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
</UL>

<P><STRONG><a name="[b8]"></a>KEY_Config</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KEY_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[9b]"></a>KEY_GetState</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KEY_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_list
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON3sec_OFF3sec
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_Check
</UL>

<P><STRONG><a name="[d6]"></a>KEY_SLEEPIN</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = KEY_SLEEPIN &rArr; LCMPower_OFF &rArr; LCD_PWM &rArr; MIPI_DCS_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_SleepMode_ON
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_OFF
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_OFF
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepIn
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OQC1
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET3
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET2
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET1
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pattern
</UL>

<P><STRONG><a name="[9c]"></a>KeyProc</STRONG> (Thumb, 402 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = KeyProc &rArr; LCM_Reset &rArr; IC_Init &rArr; LCD_PWM &rArr; MIPI_DCS_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Reset
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_SleepMode_ON
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_OFF
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_OFF
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepIn
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SLEEPIN
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_sec
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_list
</UL>

<P><STRONG><a name="[9f]"></a>AutoSwitchPattern</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AutoSwitchPattern &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_list
</UL>

<P><STRONG><a name="[9d]"></a>CTP_GetState</STRONG> (Thumb, 536 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CTP_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_list
</UL>

<P><STRONG><a name="[9e]"></a>CTPProc</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CTPProc &rArr; FPGA_DisPattern &rArr; FPGA_Info_Visible &rArr; Version_Set &rArr; FPGA_Info_Set &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_ON
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSMode
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_OFF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepOut
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepIn
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LPMode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_list
</UL>

<P><STRONG><a name="[c1]"></a>SSD2828_SPI_Config</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, ssd2828.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SSD2828_SPI_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[d8]"></a>MIPI_Reset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ssd2828.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MIPI_Reset &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD2828_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Reset
</UL>

<P><STRONG><a name="[16c]"></a>SPI3Read</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ssd2828.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI3Read
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSDReg
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDriverReg
</UL>

<P><STRONG><a name="[16d]"></a>SPI3Write</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ssd2828.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDATA2SSD
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCMD2SSD
</UL>

<P><STRONG><a name="[eb]"></a>WriteCMD2SSD</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ssd2828.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteCMD2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3Write
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDriverReg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSDReg
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDriverReg
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_Init
</UL>

<P><STRONG><a name="[ec]"></a>WriteDATA2SSD</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ssd2828.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3Write
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDriverReg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSDReg
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_Init
</UL>

<P><STRONG><a name="[ed]"></a>ReadSSDReg</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ssd2828.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReadSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3Read
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDATA2SSD
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCMD2SSD
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_SleepMode_OFF
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_GEN_Write
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_DCS_Write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_ON
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSMode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDriverReg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_SleepMode_ON
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_OFF
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LPMode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_Init
</UL>

<P><STRONG><a name="[d0]"></a>IC_Init</STRONG> (Thumb, 540 bytes, Stack size 24 bytes, ssd2828.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = IC_Init &rArr; LCD_PWM &rArr; MIPI_DCS_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OFF
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDATA2SSD
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCMD2SSD
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSDReg
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PWM
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON3sec_OFF3sec
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD2828_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Reset
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPSequence
</UL>

<P><STRONG><a name="[16e]"></a>WriteSSDReg</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ssd2828.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDATA2SSD
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCMD2SSD
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_Read
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_SleepMode_OFF
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOff
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_GEN_Write
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_DCS_Write
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDriverReg
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_ON
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSMode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_Set
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanForward
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBackward
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDriverReg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPTimes_Read
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPSequence
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_SleepMode_ON
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_OFF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepOut
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepIn
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LPMode
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SoftReset
</UL>

<P><STRONG><a name="[16f]"></a>WriteDriverReg</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ssd2828.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDATA2SSD
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCMD2SSD
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_GEN_Write
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_DCS_Write
</UL>

<P><STRONG><a name="[ea]"></a>ReadDriverReg</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, ssd2828.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ReadDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3Read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCMD2SSD
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSDReg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_GEN_Read
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_DCS_Read
</UL>

<P><STRONG><a name="[170]"></a>MIPI_DCS_Write</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ssd2828.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MIPI_DCS_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDriverReg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSDReg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PWM
</UL>

<P><STRONG><a name="[171]"></a>MIPI_GEN_Write</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ssd2828.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MIPI_GEN_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDriverReg
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSDReg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_Set
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanForward
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBackward
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPSequence
</UL>

<P><STRONG><a name="[172]"></a>MIPI_DCS_Read</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ssd2828.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MIPI_DCS_Read &rArr; ReadDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDriverReg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESD_Fail_Recover
</UL>

<P><STRONG><a name="[173]"></a>MIPI_GEN_Read</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ssd2828.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MIPI_GEN_Read &rArr; ReadDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDriverReg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_Read
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPTimes_Read
</UL>

<P><STRONG><a name="[174]"></a>SSD2828_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ssd2828.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_Reset
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[bf]"></a>FPGA_FSMC_Config</STRONG> (Thumb, 318 bytes, Stack size 104 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = FPGA_FSMC_Config &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[c0]"></a>FPGA_SPI_Config</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FPGA_SPI_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[8d]"></a>FPGA_SPI3Write</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_PORT_MAP
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_PIC_WR_CFG
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Version_Set
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Project_Check
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Project_Set
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Reg_Test
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Display_Set
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Read
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Porch_Set
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_INIT_END_INFO
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPicture
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pattern
</UL>

<P><STRONG><a name="[178]"></a>FPGA_SPI3Read</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FPGA_SPI3Read &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Project_Check
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Reg_Test
</UL>

<P><STRONG><a name="[179]"></a>FPGA_Reset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FPGA_Reset &rArr; Delay_ms &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Initial
</UL>

<P><STRONG><a name="[e2]"></a>FPGA_Porch_Set</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FPGA_Porch_Set &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Write
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Initial
</UL>

<P><STRONG><a name="[17a]"></a>FPGA_Display_Set</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FPGA_Display_Set &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Write
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Initial
</UL>

<P><STRONG><a name="[90]"></a>FPGA_Info_Set</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FPGA_Info_Set &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Write
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Initial
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OQC1
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET3
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET2
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_Mode
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResValue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoVcom
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pattern
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_Check
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chroma_Check
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check1
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPInfo_SaveFile_Check
</UL>

<P><STRONG><a name="[17b]"></a>FPGA_Reg_Test</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FPGA_Reg_Test &rArr; FPGA_SPI3Read &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Write
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Read
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET1
</UL>

<P><STRONG><a name="[17c]"></a>FPGA_Project_Set</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FPGA_Project_Set &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Write
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Initial
</UL>

<P><STRONG><a name="[17d]"></a>FPGA_Project_Check</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, fpga.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Write
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Read
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[17e]"></a>FPGA_Version_Set</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fpga.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Write
</UL>

<P><STRONG><a name="[8f]"></a>Version_Set</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Version_Set &rArr; FPGA_Info_Set &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>Project_Info_Upload</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Project_Info_Upload &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Switch
</UL>

<P><STRONG><a name="[88]"></a>FPGA_Info_Visible</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FPGA_Info_Visible &rArr; Version_Set &rArr; FPGA_Info_Set &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Set
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Write
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Initial
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_Visual_Check
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern24_test
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACD_test
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pattern_check
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_check
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Visual_check
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OTP
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OQC1
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET3
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET2
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET1
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DEMO
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CTP
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON3sec_OFF3sec
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_Mode
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResValue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoVcom
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pattern
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESD_Visual_Check
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_Check
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chroma_Check
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check1
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPInfo_SaveFile_Check
</UL>

<P><STRONG><a name="[89]"></a>FPGA_DisPattern</STRONG> (Thumb, 1376 bytes, Stack size 24 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FPGA_DisPattern &rArr; FPGA_Info_Visible &rArr; Version_Set &rArr; FPGA_Info_Set &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Write
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTPProc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Switch
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Initial
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_Visual_Check
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern24_test
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACD_test
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pattern_check
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_check
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Visual_check
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OTP
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OQC1
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET3
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET2
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET1
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DEMO
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CTP
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON3sec_OFF3sec
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_Check
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSENSOR_Test
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_CCT_MSE
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoVcom
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pattern
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESD_Visual_Check
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_Check
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chroma_Check
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check1
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPInfo_SaveFile_Check
</UL>

<P><STRONG><a name="[d4]"></a>FPGA_DisPicture</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FPGA_DisPicture &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Write
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern24_test
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pattern_check
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_check
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Visual_check
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OQC1
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET3
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET2
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DEMO
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pattern
</UL>

<P><STRONG><a name="[17f]"></a>FPGA_PIC_WR_CFG</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FPGA_PIC_WR_CFG &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Write
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP_DPT
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP_ET
</UL>

<P><STRONG><a name="[e1]"></a>FPGA_INIT_END_INFO</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FPGA_INIT_END_INFO &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Write
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Initial
</UL>

<P><STRONG><a name="[180]"></a>FPGA_PORT_MAP</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FPGA_PORT_MAP &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Write
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Initial
</UL>

<P><STRONG><a name="[86]"></a>FPGA_Initial</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, fpga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FPGA_Initial &rArr; FPGA_DisPattern &rArr; FPGA_Info_Visible &rArr; Version_Set &rArr; FPGA_Info_Set &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_PORT_MAP
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Project_Set
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Display_Set
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Reset
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Porch_Set
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_INIT_END_INFO
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>LCD_RST_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_RST_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[181]"></a>LCD_DisplayOff</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[182]"></a>LCD_DisplayOn</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[f5]"></a>LCD_LPMode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_LPMode &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSDReg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTPProc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CTP
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON3sec_OFF3sec
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPSequence
</UL>

<P><STRONG><a name="[16a]"></a>LCD_HSMode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_HSMode &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSDReg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTPProc
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CTP
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON3sec_OFF3sec
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LitSquence
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pattern
</UL>

<P><STRONG><a name="[16b]"></a>LCD_VideoMode_ON</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_VideoMode_ON &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSDReg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTPProc
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CTP
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON3sec_OFF3sec
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LitSquence
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pattern
</UL>

<P><STRONG><a name="[e6]"></a>LCD_VideoMode_OFF</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_VideoMode_OFF &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSDReg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTPProc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OTP
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CTP
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON3sec_OFF3sec
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPSequence
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SLEEPIN
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pattern
</UL>

<P><STRONG><a name="[e7]"></a>MIPI_SleepMode_ON</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MIPI_SleepMode_ON &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSDReg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OTP
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CTP
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SLEEPIN
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pattern
</UL>

<P><STRONG><a name="[183]"></a>MIPI_SleepMode_OFF</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MIPI_SleepMode_OFF &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSSDReg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CTP
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pattern
</UL>

<P><STRONG><a name="[105]"></a>ARM_PWM_Control</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ARM_PWM_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_EventProcess
</UL>

<P><STRONG><a name="[87]"></a>LCM_Init</STRONG> (Thumb, 1076 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LCM_Init &rArr; IC_Init &rArr; LCD_PWM &rArr; MIPI_DCS_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_Check
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_Read
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TE_Detect
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_Config_CTP
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SleepCurrent_Check
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_ON
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDCheck
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2C_SETTING
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPTimes_Read
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_Reset
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LitSquence
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverIC_Reset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[169]"></a>LCM_Reset</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCM_Reset &rArr; IC_Init &rArr; LCD_PWM &rArr; MIPI_DCS_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_Reset
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LitSquence
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverIC_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESD_Fail_Recover
</UL>

<P><STRONG><a name="[18a]"></a>SD_DeInit</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[19c]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[19e]"></a>SD_SelectDeselect</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1aa]"></a>SD_GetCardInfo</STRONG> (Thumb, 726 bytes, Stack size 12 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1a3]"></a>SD_InitializeCards</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1a8]"></a>SD_PowerON</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_PowerON &rArr; CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[1a9]"></a>SD_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SDIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[1ab]"></a>SD_SendStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_SendStatus &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[1ac]"></a>SD_GetState</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
</UL>

<P><STRONG><a name="[1ad]"></a>SD_GetStatus</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_GetStatus &rArr; SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1ae]"></a>SD_PowerOFF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
</UL>

<P><STRONG><a name="[1af]"></a>SD_SendSDStatus</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardStatus
</UL>

<P><STRONG><a name="[1b0]"></a>SD_GetCardStatus</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
</UL>

<P><STRONG><a name="[1b1]"></a>SD_ReadBlock</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_ReadBlock &rArr; SD_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1b4]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1b5]"></a>SD_WaitReadOperation</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SD_WaitReadOperation &rArr; SD_DMAEndOfTransferStatus &rArr; DMA_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAEndOfTransferStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1b6]"></a>SD_WriteBlock</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_WriteBlock &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[1b7]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_TxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[1b8]"></a>SD_WaitWriteOperation</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SD_WaitWriteOperation &rArr; SD_DMAEndOfTransferStatus &rArr; DMA_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAEndOfTransferStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[33c]"></a>SD_GetTransferState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sdcard.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>SD_StopTransfer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[1bb]"></a>SD_Erase</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>

<P><STRONG><a name="[a6]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_ProcessIRQSrc &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>DMA_ProcessIRQSrc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA_ProcessIRQSrc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[33d]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdcard.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>SDDMA_VIC_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDDMA_VIC_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Config
</UL>

<P><STRONG><a name="[8e]"></a>Lcd_Load_bmp</STRONG> (Thumb, 366 bytes, Stack size 112 bytes, bsp_bmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Lcd_Load_bmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showBmpInforHead
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showBmpHead
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP_DPT
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP_ET
</UL>

<P><STRONG><a name="[91]"></a>PIC_Load_BMP</STRONG> (Thumb, 360 bytes, Stack size 80 bytes, bsp_bmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = PIC_Load_BMP &rArr; Lcd_Load_bmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Load_bmp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_PIC_WR_CFG
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c4]"></a>PIC_Load_BMP_ET</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, bsp_bmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = PIC_Load_BMP_ET &rArr; Lcd_Load_bmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Load_bmp
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_PIC_WR_CFG
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OQC1
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET3
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET2
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pattern
</UL>

<P><STRONG><a name="[8c]"></a>PIC_Load_BMP_DPT</STRONG> (Thumb, 572 bytes, Stack size 64 bytes, bsp_bmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = PIC_Load_BMP_DPT &rArr; Lcd_Load_bmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Load_bmp
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_PIC_WR_CFG
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c5]"></a>SD_Write_Str2File</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, bsp_bmp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[b5]"></a>TEST_Config_ON</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, lcd_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TEST_Config_ON &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[187]"></a>TEST_Config_CTP</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lcd_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TEST_Config_CTP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
</UL>

<P><STRONG><a name="[f7]"></a>TEST_Config_OFF</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lcd_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TEST_Config_OFF &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
</UL>

<P><STRONG><a name="[1c7]"></a>Current_Check_Config</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lcd_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[8a]"></a>CTP_Start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcd_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CTP_Start &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>Differ2_Detect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[189]"></a>TE_Detect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
</UL>

<P><STRONG><a name="[1c8]"></a>ARM_PWM_Detect</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lcd_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[33e]"></a>PWM_Detect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_test.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>Connect_Check</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c9]"></a>Res_Check</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, lcd_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GetState
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OFF
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResValue
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[186]"></a>IDCheck</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IDCheck &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
</UL>

<P><STRONG><a name="[d3]"></a>AOI_Current_Check_Normal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
</UL>

<P><STRONG><a name="[f6]"></a>AOI_Current_Check_Sleep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
</UL>

<P><STRONG><a name="[fc]"></a>AOI_Current_Check</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
</UL>

<P><STRONG><a name="[1d9]"></a>Current_Check</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Switch
</UL>

<P><STRONG><a name="[188]"></a>SleepCurrent_Check</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
</UL>

<P><STRONG><a name="[f1]"></a>Meas_Current_Normal</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, lcd_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Meas_Current_Normal &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
</UL>

<P><STRONG><a name="[1cb]"></a>Meas_Current_Sleep</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, lcd_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[f4]"></a>Current_Upload</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcd_test.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
</UL>

<P><STRONG><a name="[1cc]"></a>ESD_Fail_Recover</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lcd_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ESD_Fail_Recover &rArr; LCM_Reset &rArr; IC_Init &rArr; LCD_PWM &rArr; MIPI_DCS_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_DCS_Read
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Reset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ESD
</UL>

<P><STRONG><a name="[1cd]"></a>ON3sec_OFF3sec</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, lcd_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_GetState
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_ON
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_ON
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_OFF
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_OFF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepOut
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepIn
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LPMode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverIC_Reset
</UL>

<P><STRONG><a name="[97]"></a>Test_Mode_Switch</STRONG> (Thumb, 658 bytes, Stack size 8 bytes, lcd_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2480<LI>Call Chain = Test_Mode_Switch &rArr; Test_OTP &rArr; OTP &rArr; SD_Write_OTPInfo &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_RA
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OTP
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OQC1
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OD
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET3
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET2
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET1
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ESD
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DEMO
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DEBUG
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CTP
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Current_Check
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Project_Info_Upload
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1da]"></a>Visual_check</STRONG> (Thumb, 750 bytes, Stack size 8 bytes, test_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Visual_check &rArr; FPGA_DisPattern &rArr; FPGA_Info_Visible &rArr; Version_Set &rArr; FPGA_Info_Set &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_DEBUG
</UL>

<P><STRONG><a name="[1db]"></a>Power_check</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, test_debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPicture
</UL>

<P><STRONG><a name="[1dc]"></a>Pattern_check</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, test_debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPicture
</UL>

<P><STRONG><a name="[1dd]"></a>ACD_test</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, test_debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
</UL>

<P><STRONG><a name="[1de]"></a>pattern24_test</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, test_debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPicture
</UL>

<P><STRONG><a name="[1d8]"></a>Test_DEBUG</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, test_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Test_DEBUG &rArr; Visual_check &rArr; FPGA_DisPattern &rArr; FPGA_Info_Visible &rArr; Version_Set &rArr; FPGA_Info_Set &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Visual_check
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Switch
</UL>

<P><STRONG><a name="[1d5]"></a>Test_DEMO</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, test_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Test_DEMO &rArr; FPGA_DisPattern &rArr; FPGA_Info_Visible &rArr; Version_Set &rArr; FPGA_Info_Set &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Switch
</UL>

<P><STRONG><a name="[1df]"></a>OD_Visual_Check</STRONG> (Thumb, 358 bytes, Stack size 8 bytes, test_od.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OD_Visual_Check &rArr; FPGA_DisPattern &rArr; FPGA_Info_Visible &rArr; Version_Set &rArr; FPGA_Info_Set &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OD
</UL>

<P><STRONG><a name="[1d4]"></a>Test_OD</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, test_od.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Test_OD &rArr; OD_Visual_Check &rArr; FPGA_DisPattern &rArr; FPGA_Info_Visible &rArr; Version_Set &rArr; FPGA_Info_Set &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_Visual_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Switch
</UL>

<P><STRONG><a name="[1ce]"></a>Test_ET1</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, test_et1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Test_ET1 &rArr; KEY_SLEEPIN &rArr; LCMPower_OFF &rArr; LCD_PWM &rArr; MIPI_DCS_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Reg_Test
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanForward
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBackward
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SLEEPIN
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Switch
</UL>

<P><STRONG><a name="[1cf]"></a>Test_ET2</STRONG> (Thumb, 386 bytes, Stack size 8 bytes, test_et2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = Test_ET2 &rArr; PIC_Load_BMP_ET &rArr; Lcd_Load_bmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP_ET
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanForward
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBackward
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDA_DIM
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PWM
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SLEEPIN
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Switch
</UL>

<P><STRONG><a name="[1d0]"></a>Test_ET3</STRONG> (Thumb, 380 bytes, Stack size 8 bytes, test_et3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = Test_ET3 &rArr; PIC_Load_BMP_ET &rArr; Lcd_Load_bmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP_ET
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanForward
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBackward
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDA_DIM
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PWM
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SLEEPIN
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Switch
</UL>

<P><STRONG><a name="[1e0]"></a>OTPInfo_SaveFile_Check</STRONG> (Thumb, 164 bytes, Stack size 1688 bytes, test_otp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = OTPInfo_SaveFile_Check &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OTP
</UL>

<P><STRONG><a name="[1e2]"></a>SD_Write_OTPInfo</STRONG> (Thumb, 62 bytes, Stack size 1688 bytes, test_otp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = SD_Write_OTPInfo &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
</UL>

<P><STRONG><a name="[e4]"></a>AutoVcom</STRONG> (Thumb, 1626 bytes, Stack size 64 bytes, test_otp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = AutoVcom &rArr; Meas_JEITA &rArr; calc_JEITA_flicker &rArr; fft &rArr; kiss_fft_alloc &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSENSOR_I2C_GetFlicker
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_JEITA
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Flicker
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_Set
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
</UL>

<P><STRONG><a name="[1e4]"></a>Gamma_Check1</STRONG> (Thumb, 842 bytes, Stack size 104 bytes, test_otp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Gamma_Check1 &rArr; Meas_Yxy &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yxy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
</UL>

<P><STRONG><a name="[1e5]"></a>Chroma_Check</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, test_otp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Chroma_Check &rArr; Meas_Yuv &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yuv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yxy
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
</UL>

<P><STRONG><a name="[1e6]"></a>Contrast_Check</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, test_otp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Contrast_Check &rArr; Meas_Yxy &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yxy
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
</UL>

<P><STRONG><a name="[fb]"></a>OTP</STRONG> (Thumb, 3908 bytes, Stack size 288 bytes, test_otp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2440<LI>Call Chain = OTP &rArr; SD_Write_OTPInfo &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPSequence
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoVcom
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_Check
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chroma_Check
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check1
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_OTPInfo
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OTP
</UL>

<P><STRONG><a name="[1d1]"></a>Test_OTP</STRONG> (Thumb, 790 bytes, Stack size 32 bytes, test_otp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2472<LI>Call Chain = Test_OTP &rArr; OTP &rArr; SD_Write_OTPInfo &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OFF
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPTimes_Read
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_SleepMode_ON
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_OFF
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_OFF
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepIn
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_sec
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPInfo_SaveFile_Check
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Switch
</UL>

<P><STRONG><a name="[1e7]"></a>Gamma_Check</STRONG> (Thumb, 1078 bytes, Stack size 176 bytes, test_otp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yxy
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1d2]"></a>Test_RA</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_ra.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Switch
</UL>

<P><STRONG><a name="[1e9]"></a>ESD_Visual_Check</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, test_esd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ESD_Visual_Check &rArr; FPGA_DisPattern &rArr; FPGA_Info_Visible &rArr; Version_Set &rArr; FPGA_Info_Set &rArr; FPGA_SPI3Write
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ESD
</UL>

<P><STRONG><a name="[1d3]"></a>Test_ESD</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, test_esd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Test_ESD &rArr; ESD_Fail_Recover &rArr; LCM_Reset &rArr; IC_Init &rArr; LCD_PWM &rArr; MIPI_DCS_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESD_Fail_Recover
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESD_Visual_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Switch
</UL>

<P><STRONG><a name="[1d6]"></a>Test_CTP</STRONG> (Thumb, 316 bytes, Stack size 8 bytes, test_ctp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Test_CTP &rArr; ScanForward &rArr; MIPI_GEN_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_SleepMode_OFF
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_ON
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSMode
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanForward
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBackward
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_SleepMode_ON
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_OFF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepOut
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepIn
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Switch
</UL>

<P><STRONG><a name="[1d7]"></a>Test_OQC1</STRONG> (Thumb, 350 bytes, Stack size 8 bytes, test_oqc1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = Test_OQC1 &rArr; PIC_Load_BMP_ET &rArr; Lcd_Load_bmp &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP_ET
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanForward
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBackward
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDA_DIM
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PWM
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SLEEPIN
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPicture
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Switch
</UL>

<P><STRONG><a name="[1ea]"></a>get_RGBGray</STRONG> (Thumb, 318 bytes, Stack size 104 bytes, test_sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanBackward
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDA_DIM
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PWM
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pattern
</UL>

<P><STRONG><a name="[83]"></a>TEST_MODE_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test_sdcard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ee]"></a>Display_Pattern</STRONG> (Thumb, 580 bytes, Stack size 48 bytes, test_sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_SPI3Write
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP_ET
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_SleepMode_OFF
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_ON
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSMode
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanForward
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_SleepMode_ON
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_OFF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepOut
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepIn
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SLEEPIN
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPicture
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RGBGray
</UL>

<P><STRONG><a name="[d2]"></a>ScanForward</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, common_otp code_ft8719_v3p0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ScanForward &rArr; MIPI_GEN_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_GEN_Write
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OQC1
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET3
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET2
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET1
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CTP
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pattern
</UL>

<P><STRONG><a name="[d1]"></a>ScanBackward</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, common_otp code_ft8719_v3p0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ScanBackward &rArr; MIPI_GEN_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_GEN_Write
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OQC1
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET3
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET2
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET1
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CTP
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RGBGray
</UL>

<P><STRONG><a name="[e9]"></a>VCOM_Set</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, common_otp code_ft8719_v3p0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = VCOM_Set &rArr; MIPI_GEN_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_GEN_Write
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoVcom
</UL>

<P><STRONG><a name="[185]"></a>VCOM_Read</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, common_otp code_ft8719_v3p0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VCOM_Read &rArr; MIPI_GEN_Read &rArr; ReadDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_GEN_Read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPSequence
</UL>

<P><STRONG><a name="[e3]"></a>OTPTimes_Read</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, common_otp code_ft8719_v3p0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OTPTimes_Read &rArr; MIPI_GEN_Read &rArr; ReadDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_GEN_Read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OTP
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPSequence
</UL>

<P><STRONG><a name="[1ef]"></a>ID_Chroma_OTP</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common_otp code_ft8719_v3p0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPSequence
</UL>

<P><STRONG><a name="[df]"></a>LCD_SleepOut</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, common_otp code_ft8719_v3p0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_SleepOut &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTPProc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CTP
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON3sec_OFF3sec
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LitSquence
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pattern
</UL>

<P><STRONG><a name="[d9]"></a>LCD_PWM</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, common_otp code_ft8719_v3p0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_PWM &rArr; MIPI_DCS_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_DCS_Write
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OQC1
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET3
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET2
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_OFF1
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDA_DIM
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_OFF
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LitSquence
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RGBGray
</UL>

<P><STRONG><a name="[e0]"></a>LCD_LitSquence</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, common_otp code_ft8719_v3p0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCD_LitSquence &rArr; LCD_PWM &rArr; MIPI_DCS_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_ON
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSMode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepOut
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PWM
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Reset
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPSequence
</UL>

<P><STRONG><a name="[d7]"></a>DriverIC_Reset</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, common_otp code_ft8719_v3p0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DriverIC_Reset &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON3sec_OFF3sec
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Reset
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPSequence
</UL>

<P><STRONG><a name="[de]"></a>LCD_SleepIn</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, common_otp code_ft8719_v3p0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_SleepIn &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTPProc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OTP
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_CTP
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON3sec_OFF3sec
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPSequence
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SLEEPIN
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Pattern
</UL>

<P><STRONG><a name="[d5]"></a>OTPSequence</STRONG> (Thumb, 738 bytes, Stack size 32 bytes, common_otp code_ft8719_v3p0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OTPSequence &rArr; IC_Init &rArr; LCD_PWM &rArr; MIPI_DCS_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VCOM_Read
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_GEN_Write
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPTimes_Read
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_OFF
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepIn
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LitSquence
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LPMode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverIC_Reset
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ID_Chroma_OTP
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
</UL>

<P><STRONG><a name="[1f0]"></a>LCD_SoftReset</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, common_otp code_ft8719_v3p0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSSDReg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[f0]"></a>LEDA_DIM</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, common_otp code_ft8719_v3p0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LEDA_DIM &rArr; LCD_PWM &rArr; MIPI_DCS_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PWM
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OQC1
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET3
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET2
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RGBGray
</UL>

<P><STRONG><a name="[184]"></a>LCMPower_ON</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, common_otp code_ft8719_v3p0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCMPower_ON &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON3sec_OFF3sec
</UL>

<P><STRONG><a name="[e8]"></a>LCMPower_OFF</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, common_otp code_ft8719_v3p0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCMPower_OFF &rArr; LCD_PWM &rArr; MIPI_DCS_Write &rArr; WriteDriverReg &rArr; WriteSSDReg &rArr; WriteDATA2SSD &rArr; SPI3Write &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PWM
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OTP
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON3sec_OFF3sec
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SLEEPIN
</UL>

<P><STRONG><a name="[dd]"></a>PreGamma_Set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common_otp code_ft8719_v3p0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
</UL>

<P><STRONG><a name="[1bd]"></a>f_mount</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Load_bmp
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_Str2File
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_OTPInfo
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPInfo_SaveFile_Check
</UL>

<P><STRONG><a name="[1be]"></a>f_open</STRONG> (Thumb, 524 bytes, Stack size 112 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Load_bmp
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_Str2File
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_OTPInfo
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPInfo_SaveFile_Check
</UL>

<P><STRONG><a name="[1bf]"></a>f_read</STRONG> (Thumb, 412 bytes, Stack size 72 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Load_bmp
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
</UL>

<P><STRONG><a name="[21e]"></a>f_write</STRONG> (Thumb, 482 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_flush
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[21f]"></a>f_sync</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[1c0]"></a>f_close</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Load_bmp
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_Str2File
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_OTPInfo
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPInfo_SaveFile_Check
</UL>

<P><STRONG><a name="[1c3]"></a>f_lseek</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Load_bmp
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_Str2File
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_OTPInfo
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPInfo_SaveFile_Check
</UL>

<P><STRONG><a name="[220]"></a>f_opendir</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findfirst
</UL>

<P><STRONG><a name="[221]"></a>f_closedir</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>

<P><STRONG><a name="[222]"></a>f_readdir</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findnext
</UL>

<P><STRONG><a name="[223]"></a>f_findnext</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findfirst
</UL>

<P><STRONG><a name="[224]"></a>f_findfirst</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findnext
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[225]"></a>f_stat</STRONG> (Thumb, 62 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[226]"></a>f_getfree</STRONG> (Thumb, 258 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>

<P><STRONG><a name="[227]"></a>f_truncate</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>

<P><STRONG><a name="[228]"></a>f_unlink</STRONG> (Thumb, 170 bytes, Stack size 128 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[229]"></a>f_mkdir</STRONG> (Thumb, 346 bytes, Stack size 88 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
</UL>

<P><STRONG><a name="[22a]"></a>f_rename</STRONG> (Thumb, 272 bytes, Stack size 160 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>

<P><STRONG><a name="[22b]"></a>f_gets</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[22e]"></a>f_putc</STRONG> (Thumb, 34 bytes, Stack size 88 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_flush
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[1c6]"></a>f_puts</STRONG> (Thumb, 44 bytes, Stack size 88 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = f_puts &rArr; putc_bfd &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_flush
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_Str2File
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_OTPInfo
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPInfo_SaveFile_Check
</UL>

<P><STRONG><a name="[230]"></a>f_printf</STRONG> (Thumb, 596 bytes, Stack size 168 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_flush
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[21c]"></a>disk_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1e1]"></a>disk_initialize</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPInfo_SaveFile_Check
</UL>

<P><STRONG><a name="[1f4]"></a>disk_read</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = disk_read &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[1f2]"></a>disk_write</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>

<P><STRONG><a name="[1f9]"></a>disk_ioctl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, diskio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[33f]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>ff_convert</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ccsbcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[207]"></a>ff_wtoupper</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, ccsbcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[340]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Initial
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kiss_fft_stride
</UL>

<P><STRONG><a name="[341]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RGBGray
</UL>

<P><STRONG><a name="[1ed]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RGBGray
</UL>

<P><STRONG><a name="[1ec]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RGBGray
</UL>

<P><STRONG><a name="[10a]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Initial
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Current_Sleep
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yuv
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_JEITA
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Project_Info_Upload
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yxy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Current_Normal
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RGBGray
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check1
</UL>

<P><STRONG><a name="[10e]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_CCT_MSE
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RGBGray
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check1
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2C_SETTING
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly_generic
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly5
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly3
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly2
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2C_SETTING
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly_generic
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly5
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly3
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly2
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPSequence
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoVcom
</UL>

<P><STRONG><a name="[235]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2C_SETTING
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly_generic
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly5
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly3
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly2
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSwitchPattern
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResValue
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPSequence
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoVcom
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP_DPT
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP_ET
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResValue
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idft
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dft
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_flicker_rms
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_flicker_mm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_VESA_flicker
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JEITA_weighing
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fftold
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_CCT
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_Check
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly3
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_flicker_rms
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_flicker_mm
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_CCT
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check1
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[121]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResValue
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idft
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dft
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fftold
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP_DPT
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP_ET
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSENSOR_I2C_GetFlicker
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResValue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly3
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kiss_fft_alloc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idft
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dft
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_flicker_rms
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_flicker_mm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_VESA_flicker
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JEITA_weighing
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fftold
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_JEITA_flicker
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_CCT
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RGBGray
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP_DPT
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP_ET
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSENSOR_I2C_GetFlicker
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResValue
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kiss_fft_alloc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idft
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dft
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_flicker_rms
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_flicker_mm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_VESA_flicker
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fftold
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_JEITA_flicker
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_CCT
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_Check
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check1
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSwitchPattern
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPSequence
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoVcom
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP_DPT
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP_ET
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSENSOR_I2C_GetFlicker
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_factor
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kiss_fft_alloc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResValue
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idft
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dft
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_flicker_rms
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_flicker_mm
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fftold
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check1
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[156]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2C_SETTING
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_CCT
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RGBGray
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP_DPT
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP_ET
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResValue
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSwitchPattern
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OTP
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_Check
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResValue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly3
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yuv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_CCT
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_JEITA
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Flicker
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPSequence
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yxy
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoVcom
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_Check
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chroma_Check
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check1
</UL>

<P><STRONG><a name="[25f]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_Check
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_flicker_mm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_VESA_flicker
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JEITA_weighing
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_JEITA_flicker
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_Check
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chroma_Check
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check1
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResValue
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_factor
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_flicker_mm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_VESA_flicker
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JEITA_weighing
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_JEITA_flicker
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoVcom
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chroma_Check
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check1
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Current_Sleep
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSENSOR_I2C_GetFlicker
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResValue
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly3
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kiss_fft_alloc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yuv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_CCT
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_JEITA
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Flicker
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yxy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Current_Normal
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_Check
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1e3]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoVcom
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_Check
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoVcom
</UL>

<P><STRONG><a name="[1ca]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_Check
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoVcom
</UL>

<P><STRONG><a name="[342]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[23b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[236]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[343]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[344]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[345]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[232]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[346]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[233]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[239]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[238]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[24d]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[347]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[242]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[64]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[348]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[60]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[23d]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[246]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[5e]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[240]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[248]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[245]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[349]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>I2C_Delay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c.o(i.I2C_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Delay &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Rx
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Tx
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Check_Ack
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Uak
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[158]"></a>POWER_IOVCC_Reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, power.o(i.POWER_IOVCC_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = POWER_IOVCC_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_OFF1
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_Init
</UL>

<P><STRONG><a name="[157]"></a>POWER_VCI_Set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, power.o(i.POWER_VCI_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = POWER_VCI_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_ON1
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_Init
</UL>

<P><STRONG><a name="[159]"></a>POWER_VSN_Set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, power.o(i.POWER_VSN_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = POWER_VSN_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_ON1
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_Init
</UL>

<P><STRONG><a name="[15a]"></a>POWER_VSP_Set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, power.o(i.POWER_VSP_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = POWER_VSP_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_ON1
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_Init
</UL>

<P><STRONG><a name="[249]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[34b]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[93]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTPProc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoSwitchPattern
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EventProcess
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Switch
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Load_bmp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Initial
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Start
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_OTP
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_ET1
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESD_Fail_Recover
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Current_Sleep
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Res_Check
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_Str2File
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_ON
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDCheck
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_SleepMode_OFF
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOff
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Project_Check
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Reg_Test
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD2828_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_GEN_Read
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_DCS_Read
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_GEN_Write
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_DCS_Write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_ON
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSMode
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Test_Mode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WR_Verify
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_Read
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_I2C_Write
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSENSOR_Test
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSENSOR_I2C_GetFlicker
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadSensor
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_ADCADDR
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_OFF1
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_ON1
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_I2C_SETTING
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResValue
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_VESA_flicker
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_JEITA_flicker
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yuv
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_CCT
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_XYZ
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_CCT_MSE
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_JEITA
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Flicker
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDriverReg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Project_Info_Upload
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPSequence
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yxy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Current_Normal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_SleepMode_ON
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MIPI_Reset
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCMPower_OFF
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VideoMode_OFF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepOut
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SleepIn
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PWM
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_LPMode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverIC_Reset
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoVcom
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_Gamma_Code
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_EventProcess
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ProcessIRQSrc
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SoftReset
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Contrast_Check
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chroma_Check
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check1
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPInfo_SaveFile_Check
</UL>

<P><STRONG><a name="[34c]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[34d]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[24b]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[34e]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[140]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIC_Load_BMP
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Load_bmp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_Info_Visible
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPGA_DisPattern
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Write_Str2File
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetResValue
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Project_Info_Upload
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTP
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RGBGray
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTPInfo_SaveFile_Check
</UL>

<P><STRONG><a name="[34f]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[350]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[251]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[231]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[351]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[24c]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[24e]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[24f]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[250]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[253]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[254]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[255]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[256]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[257]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[252]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[25c]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[352]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[353]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[354]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[25d]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[247]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[107]"></a>atof</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Current_Sleep
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yuv
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_JEITA
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Flicker
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Yxy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_Current_Normal
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RGBGray
</UL>

<P><STRONG><a name="[11f]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kiss_fft_alloc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idft
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dft
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fftold
</UL>

<P><STRONG><a name="[112]"></a>exp</STRONG> (Thumb, 554 bytes, Stack size 48 bytes, exp.o(i.exp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_CCT
</UL>

<P><STRONG><a name="[130]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_factor
</UL>

<P><STRONG><a name="[10c]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kiss_fft_stride
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly_generic
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_VESA_flicker
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_JEITA_flicker
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_JEITA
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check1
</UL>

<P><STRONG><a name="[25e]"></a>log</STRONG> (Thumb, 808 bytes, Stack size 96 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log10
</UL>

<P><STRONG><a name="[123]"></a>log10</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, log10.o(i.log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = log10 &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_flicker_rms
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_flicker_mm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_VESA_flicker
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_JEITA_flicker
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check1
</UL>

<P><STRONG><a name="[109]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kiss_fft_stride
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly_generic
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kiss_fft_alloc
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_VESA_flicker
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_JEITA_flicker
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meas_JEITA
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check1
</UL>

<P><STRONG><a name="[1e8]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gamma_Check
</UL>

<P><STRONG><a name="[120]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kiss_fft_alloc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idft
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dft
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fftold
</UL>

<P><STRONG><a name="[11d]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_factor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_flicker_rms
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fftold
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[78]"></a>TI4_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[76]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[74]"></a>TI2_Config</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[72]"></a>TI1_Config</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f2xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[81]"></a>SetSysClock</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, system_stm32f2xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[fe]"></a>itoa</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_printf
</UL>

<P><STRONG><a name="[129]"></a>kf_bfly2</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, kiss_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = kf_bfly2 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_work
</UL>

<P><STRONG><a name="[12a]"></a>kf_bfly4</STRONG> (Thumb, 572 bytes, Stack size 112 bytes, kiss_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = kf_bfly4 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_work
</UL>

<P><STRONG><a name="[12b]"></a>kf_bfly3</STRONG> (Thumb, 492 bytes, Stack size 120 bytes, kiss_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = kf_bfly3 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_work
</UL>

<P><STRONG><a name="[12c]"></a>kf_bfly5</STRONG> (Thumb, 1534 bytes, Stack size 192 bytes, kiss_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = kf_bfly5 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_work
</UL>

<P><STRONG><a name="[12d]"></a>kf_bfly_generic</STRONG> (Thumb, 286 bytes, Stack size 80 bytes, kiss_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = kf_bfly_generic &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_work
</UL>

<P><STRONG><a name="[12e]"></a>kf_work</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, kiss_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + In Cycle
<LI>Call Chain = kf_work &rArr;  kf_work (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_work
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly_generic
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly5
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly3
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly4
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_bfly2
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kiss_fft_stride
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kf_work
</UL>

<P><STRONG><a name="[12f]"></a>kf_factor</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, kiss_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = kf_factor &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kiss_fft_alloc
</UL>

<P><STRONG><a name="[18d]"></a>SD_DMAEndOfTransferStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SD_DMAEndOfTransferStatus &rArr; DMA_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitWriteOperation
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReadOperation
</UL>

<P><STRONG><a name="[18f]"></a>SD_DMA_RxConfig</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_DMA_RxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[192]"></a>SD_DMA_TxConfig</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[193]"></a>GPIO_SDIO_Configuration</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_SDIO_Configuration &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[194]"></a>CmdResp1Error</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[196]"></a>FindSCR</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[19b]"></a>SDEnWideBus</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[19f]"></a>CmdResp2Error</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[1a0]"></a>CmdResp6Error</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CmdResp6Error &rArr; SDIO_GetResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[1a5]"></a>CmdResp3Error</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp3Error
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1a6]"></a>CmdResp7Error</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1a7]"></a>CmdError</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1ba]"></a>IsCardProgramming</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
</UL>

<P><STRONG><a name="[1c1]"></a>showBmpHead</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_bmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Load_bmp
</UL>

<P><STRONG><a name="[1c2]"></a>showBmpInforHead</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_bmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Load_bmp
</UL>

<P><STRONG><a name="[1fb]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>

<P><STRONG><a name="[1fc]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>

<P><STRONG><a name="[1f7]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[1f8]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[20b]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
</UL>

<P><STRONG><a name="[1f6]"></a>mem_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[20f]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[217]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[1f1]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[1f3]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>

<P><STRONG><a name="[1f5]"></a>sync_fs</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[201]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[1fa]"></a>get_fat</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[1fd]"></a>put_fat</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[1fe]"></a>remove_chain</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
</UL>

<P><STRONG><a name="[1ff]"></a>create_chain</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[200]"></a>dir_sdi</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[202]"></a>dir_next</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[203]"></a>dir_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[204]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[205]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[206]"></a>cmp_lfn</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[208]"></a>pick_lfn</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[209]"></a>put_lfn</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = put_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[20a]"></a>gen_numname</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[20d]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[20c]"></a>dir_read</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[20e]"></a>dir_find</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[210]"></a>dir_register</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[211]"></a>dir_remove</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[212]"></a>get_fileinfo</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[215]"></a>get_achar</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ff.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
</UL>

<P><STRONG><a name="[214]"></a>pattern_matching</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_achar
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findnext
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
</UL>

<P><STRONG><a name="[216]"></a>create_name</STRONG> (Thumb, 534 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[218]"></a>follow_path</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[21b]"></a>get_ldnumber</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[219]"></a>check_fs</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[21a]"></a>find_volume</STRONG> (Thumb, 748 bytes, Stack size 88 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[21d]"></a>validate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[22c]"></a>putc_bfd</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = putc_bfd &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[22d]"></a>putc_flush</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = putc_flush &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteMultiBlocks &rArr; SD_DMA_TxConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[22f]"></a>putc_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[258]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[24a]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[25a]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[259]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[62]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[23c]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[244]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
